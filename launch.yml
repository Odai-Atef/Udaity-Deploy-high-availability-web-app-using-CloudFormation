Parameters:
 
 EnviromentName:
  Type: String
  Default: UdacityProjectII
  Description: This is enviroment name

 S3Bucket:
  Type: String
  Default: udacity-demo-1
  Description: Project Bucket Name
  
 Ec2TypeID:
  Type: String
  Default: t2.micro
  Description: Type of image

 EC2ImageID:
  Type: String
  Default: ami-0ba60995c1589da9d
  Description: Ec2 launch Image ID 

 VPCCIDR:
  Description: VPC IP range CIDR
  Type: String
  Default: 10.192.0.0/16
 
 PrivateSubnetICIDR:
  Description: IP range CIDR for first private subnet
  Type: String
  Default: 10.192.20.0/24
 
 PrivateSubnetIICIDR:
  Description: IP range CIDR for second private subnet
  Type: String
  Default: 10.192.21.0/24


# whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
Resources:
  Ec2LaunchConfiguration:
   Type: AWS::AutoScaling::LaunchConfiguration
   Properties:
    UserData: !Base64 |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
    
    ImageId: !Ref EC2ImageID
    InstanceType: !Ref Ec2TypeID
    KeyName: EC2
    IamInstanceProfile: !Ref EC2InstanceProfile
    BlockDeviceMappings: 
      - DeviceName: "/dev/sdm"
        Ebs: 
         VolumeType: "io1"
         Iops: "200"
         DeleteOnTermination: "false"
         VolumeSize: "20"
    SecurityGroups: 
        - Ref: "EC2SecurityGroup"
  
  AutoScaleGroup:
   Type: AWS::AutoScaling::AutoScalingGroup
   Properties:
    LaunchConfigurationName: !Ref Ec2LaunchConfiguration
    MinSize: 4
    MaxSize: 8
    VPCZoneIdentifier: [!Ref PrivateSubnetI, !Ref PrivateSubnetII]

  EC2S3RoleAccess:
   Type: AWS::IAM::Role
   Properties:
    AssumeRolePolicyDocument:
        Statement:
         - Action: ['sts:AssumeRole']
           Effect: Allow
           Principal:
            Service: [s3.amazonaws.com]
    Tags:
     - Key: name
       Value: !Ref EnviromentName

  S3BucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action: ['s3:GetReplicationConfiguration', 's3:ListBucket']
          Effect: Allow
          Resource:
          - !Join ['', ['arn:aws:s3:::', !Ref 'S3Bucket']]
        - Action: ['s3:GetObjectVersion', 's3:GetObjectVersionAcl']
          Effect: Allow
          Resource:
          - !Join ['', ['arn:aws:s3:::', !Ref 'S3Bucket', /*]]
        - Action: ['s3:ReplicateObject', 's3:ReplicateDelete']
          Effect: Allow
          Resource:
          - !Join ['', ['arn:aws:s3:::', !Join ['-', [!Ref 'AWS::Region', !Ref 'AWS::StackName',
                  replicationbucket]], /*]]
      PolicyName: S3BucketPolicy
      Roles: [!Ref 'EC2S3RoleAccess']     

  EC2InstanceProfile:
   Type: AWS::IAM::InstanceProfile
   Properties:
    Roles:
     - Ref: "EC2S3RoleAccess"



  VPC:
   Type: AWS::EC2::VPC
   Properties:
    CidrBlock: !Ref VPCCIDR
    EnableDnsSupport: true
    EnableDnsHostnames: true
    Tags:
     - Key: name
       Value: !Ref EnviromentName
  
  PrivateSubnetI:
   Type: AWS::EC2::Subnet
   Properties:
    VpcId: !Ref VPC
    AvailabilityZone: !Select [ 0, !GetAZs  '' ]
    MapPublicIpOnLaunch: false
    CidrBlock: !Ref PrivateSubnetICIDR
    Tags:
     - Key: name
       Value: !Ref EnviromentName
     - Key: Description
       Value: PrivateSubnetI

  PrivateSubnetII:
   Type: AWS::EC2::Subnet
   Properties:
    VpcId: !Ref VPC
    AvailabilityZone: !Select [ 1, !GetAZs  '' ]
    MapPublicIpOnLaunch: false
    CidrBlock: !Ref PrivateSubnetIICIDR
    Tags:
     - Key: name
       Value: !Ref EnviromentName
     - Key: Description
       Value: PrivateSubnetII

  EC2SecurityGroup:
   Type: AWS::EC2::SecurityGroup
   Properties:
    VpcId: !Ref VPC
    GroupDescription: Security Group for instances
    SecurityGroupEgress: 
     - CidrIp: 0.0.0.0/0
       IpProtocol: tcp
       ToPort: 80
       FromPort: 80
       Description: Web Access


     - CidrIp: 0.0.0.0/0
       IpProtocol: tcp
       ToPort: 22
       FromPort: 22
       Description: SSH access


    SecurityGroupIngress:
     - CidrIp: 0.0.0.0/0
       IpProtocol: tcp
       FromPort: 80
       ToPort: 80
       Description: Web Access

     - CidrIp: 0.0.0.0/0
       IpProtocol: tcp
       FromPort: 22
       ToPort: 22
       Description: SSH access
    Tags:
     - Key: name
       Value: !Ref EnviromentName

Outputs:
  ProcessDone:
    Description: Enviroment Ready
    Value: Enviroment Ready
    

  # Ec2InstanceI:
  #  Type: AWS::EC2::Instance
  #  Properties:
  #   Tags:
  #    - Key: name
  #      Value: !Ref EnviromentName
  #   ImageId: !Ref EC2ImageID
  #   InstanceType: !Ref Ec2TypeID
  #   KeyName: EC2
  #   NetworkInterfaces: 
  #     - AssociatePublicIpAddress: "true"
  #       DeviceIndex: "0"
  #       GroupSet:
  #        - Ref: EC2SecurityGroup
  #       SubnetId:
  #        Ref: PrivateSubnetI

  #   BlockDeviceMappings: 
  #     - DeviceName: "/dev/sdm"
  #       Ebs: 
  #        VolumeType: "io1"
  #        Iops: "200"
  #        DeleteOnTermination: "false"
  #        VolumeSize: "20"  

  # Ec2InstanceII:
  #  Type: AWS::EC2::Instance
  #  Properties:
  #   Tags:
  #    - Key: name
  #      Value: !Ref EnviromentName
  #   ImageId: !Ref EC2ImageID
  #   InstanceType: !Ref Ec2TypeID
  #   KeyName: EC2
  #   NetworkInterfaces: 
  #     - AssociatePublicIpAddress: "true"
  #       DeviceIndex: "0"
  #       GroupSet:
  #        - Ref: EC2SecurityGroup
  #       SubnetId:
  #        Ref: PrivateSubnetI

  #   BlockDeviceMappings: 
  #     - DeviceName: "/dev/sdm"
  #       Ebs: 
  #        VolumeType: "io1"
  #        Iops: "200"
  #        DeleteOnTermination: "false"
  #        VolumeSize: "20"      

  # Ec2InstanceIII:
  #  Type: AWS::EC2::Instance
  #  Properties:
  #   Tags:
  #    - Key: name
  #      Value: !Ref EnviromentName
  #   ImageId: !Ref EC2ImageID
  #   InstanceType: !Ref Ec2TypeID
  #   KeyName: EC2
  #   NetworkInterfaces: 
  #     - AssociatePublicIpAddress: "true"
  #       DeviceIndex: "0"
  #       GroupSet:
  #        - Ref: EC2SecurityGroup
  #       SubnetId:
  #        Ref: PrivateSubnetII

  #   BlockDeviceMappings: 
  #     - DeviceName: "/dev/sdm"
  #       Ebs: 
  #        VolumeType: "io1"
  #        Iops: "200"
  #        DeleteOnTermination: "false"
  #        VolumeSize: "20"      

  # Ec2InstanceIV:
  #  Type: AWS::EC2::Instance
  #  Properties:
  #   Tags:
  #    - Key: name
  #      Value: !Ref EnviromentName
  #   ImageId: !Ref EC2ImageID
  #   InstanceType: !Ref Ec2TypeID
  #   KeyName: EC2
  #   NetworkInterfaces: 
  #     - AssociatePublicIpAddress: "true"
  #       DeviceIndex: "0"
  #       GroupSet:
  #        - Ref: EC2SecurityGroup
  #       SubnetId:
  #        Ref: PrivateSubnetII

  #   BlockDeviceMappings: 
  #     - DeviceName: "/dev/sdm"
  #       Ebs: 
  #        VolumeType: "io1"
  #        Iops: "200"
  #        DeleteOnTermination: "false"
  #        VolumeSize: "20"      




